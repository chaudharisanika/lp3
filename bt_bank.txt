// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;

contract MyBank {
    mapping(address => uint) private _balances;
    address public owner;

    event LogDepositMade(address accountHolder, uint amount);

    // Constructor to set the owner (no need for 'public' visibility)
    constructor() {
        owner = msg.sender;
        emit LogDepositMade(msg.sender, 1000);
    }

    // Function to deposit funds
    function deposit() public payable returns (uint) {
        require((_balances[msg.sender] + msg.value) > _balances[msg.sender], "Deposit overflow");
        require(msg.sender != address(0), "Invalid address");

        _balances[msg.sender] += msg.value;
        emit LogDepositMade(msg.sender, msg.value);

        return _balances[msg.sender];
    }

    // Function to withdraw funds
    function withdraw(uint withdrawAmount) public returns (uint) {
        require(_balances[msg.sender] >= withdrawAmount, "Insufficient balance");
        require(msg.sender != address(0), "Invalid address");
        require(_balances[msg.sender] > 0, "Zero balance");

        _balances[msg.sender] -= withdrawAmount;
        payable(msg.sender).transfer(withdrawAmount);

        emit LogDepositMade(msg.sender, withdrawAmount);

        return _balances[msg.sender];
    }

    // Function to view the balance
    function viewBalance() public view returns (uint) {
        return _balances[msg.sender];
    }
}