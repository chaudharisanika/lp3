# First let's start with calling all the dependencies for this project 
import numpy as np 
import pandas as pd
import math
import matplotlib.pyplot as plt
%matplotlib inline 
import seaborn as sns

df = pd.read_csv("Churn_Modelling.csv")
df.head()

df.shape

df.drop(['RowNumber','Surname'], axis = 'columns', inplace =True)

df.isna().sum()

df.dtypes

df['Geography'].unique()

df['Gender'].unique()

df['Gender'] = df['Gender'].replace(['Male', 'Female'], [1, 0])
df.replace({'Gender': {'Male': 1, 'Female': 0}}, inplace=True)
pd.set_option('future.no_silent_downcasting', True)

#one hot encoding
df = pd.get_dummies(data = df, columns=['Geography'])
df.dtypes

df['Exited'].value_counts()

def visualization(x, y, xlabel):
    plt.figure(figsize=(10,5))
    plt.hist([x, y], color=['red', 'green'], label = ['exit', 'not_exit'])
    plt.xlabel(xlabel,fontsize=20)
    plt.ylabel("No. of customers", fontsize=20)
    plt.legend()

#get in to temp fframe
df_exited = df[df['Exited']==1]['Tenure']
df_not_exited = df[df['Exited']==0]['Tenure']

visualization(df_exited, df_not_exited, "Tenure")

df_exited1 = df[df['Exited']==1]['Age']
df_not_exited1= df[df['Exited']==0]['Age']

visualization(df_exited1, df_not_exited1, "Tenure")

# normalization
cols_to_scale = ['CustomerId','CreditScore', 'Age','Tenure', 'Balance', 'NumOfProducts', 'EstimatedSalary']


# Import necessary libraries
from sklearn.preprocessing import MinMaxScaler
import pandas as pd

# Select only the numeric columns
cols_to_scale = df.select_dtypes(include=['float64', 'int64']).columns

# Initialize the MinMaxScaler
scaler = MinMaxScaler()

# Fit and transform only the numeric columns
df[cols_to_scale] = scaler.fit_transform(df[cols_to_scale])



#separate outcome or target col
X = df.drop(['Exited'], axis=1)
y = df['Exited']


from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)


from sklearn.preprocessing import StandardScaler

# feature scaling

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


import tensorflow as tf
from tensorflow import keras


model = keras.Sequential([
    keras.layers.Dense(12,input_shape=(12,),activation='relu'),
    keras.layers.Dense(15,activation='relu'),
    keras.layers.Dense(1,activation='sigmoid')
])


model.compile(optimizer='adam',
              loss='binary_cossentropy',
              metrics=['accuracy'])


